description: |
  Installs a Helm chart in Kubernetes.
parameters:
  chart:
    description: |
      Specify for installation a chart reference (e.g. helm/mychart),
      or a path to a packaged chart (e.g. ./mychart-1.2.3.tgz),
      or a path to an unpacked chart directory (e.g. ./helm)
      or an absolute URL (e.g. https://example.com/charts/mychart-1.2.3.tgz)
    type: string
  release-name:
    description: |
      Specify a name for the release.
    type: string
    default: ""
  namespace:
    description: |
      The kubernetes namespace that should be used.
      Examples: dev, staging, production, kafka
    type: string
    default: ""
  value-files:
    description: |
      Specify values in a YAML file or a URL (can specify multiple).
      Separated by comma ( , )
      (e.g. helm/some-values.yaml, helm/other-values.yaml)
    type: string
    default: ""
  wait:
    description: |
      Whether to wait for the installation to be complete. Default true
    type: boolean
    default: true
  debug:
    description: |
      Run helm install with debug parameter. Default false
    type: boolean
    default: false
  timeout:
    description: |
      Amount of time in seconds to wait for --wait to verify deployment.
      type: integer
      default: 300
  #| ---- Authentication ---- |#
  gcp-service-key:
    description: |
      The credentials for the Service Account to be used when communicating to Google Cloud.
      If not provided, the command will look for the environment variable $GCLOUD_SERVICE_KEY
      To obtain the key for this command,
      use either the Google Cloud Platform Console or gcloud iam service-accounts keys create.
      The key can be .json (preferred) or .p12 (legacy) format.
    type: string
    default: ""
  gcp-container-cluster:
    description: |
      The name of the Google Cloud container cluster to use.
      If not provided, the command will look for the environment variable $CLOUDSDK_CONTAINER_CLUSTER
      To obtain the name of your clusters,
      use the Google Cloud Platform Console (Command: gcloud container clusters list)
    type: string
    default: ""
  gcp-container-zone:
    description: |
      The name of the Google Cloud zone to use.
      If zone is not provided, the command will look for the environment variable $CLOUDSDK_CONTAINER_ZONE
    type: string
    default: ""
  gcp-container-region:
    description: |
      The name of the Google Cloud regional cluster to use.
      If region is not provided, the command will use zone and look for the environment variable $CLOUDSDK_CONTAINER_ZONE
    type: string
    default: ""

steps:
  - gcp-auth/authenticate-gcp-kubernetes:
      gcp-service-key: << parameters.gcp-service-key >>
      gcp-container-cluster: << parameters.gcp-container-cluster >>
      gcp-container-zone: << parameters.gcp-container-zone >>
      gcp-container-region: << parameters.gcp-container-region >>
  - install-helm-client
  - run:
      name: Deploy Helm chart to Kubernetes
      command: |
        NAMESPACE="<< parameters.namespace >>"
        VALUE_FILES="<< parameters.value-files >>"
        WAIT="<< parameters.wait >>"
        DEBUG="<< parameters.debug >>"
        TIMEOUT="<< parameters.timeout >>"
        if [[ -n "${VALUE_FILES}" ]]; then
            SPLIT_VALUE_FILES=($(echo ${VALUE_FILES} | tr "," "\n"))
            for i in ${SPLIT_VALUE_FILES[@]} ; do
                set -- "$@" -f "${i}"
            done
        fi
        if [[ -n "${NAMESPACE}" ]]; then
          set -- "$@" --set environment="${NAMESPACE}"
          set -- "$@" --namespace="${NAMESPACE}"
        fi
        if [[ "${WAIT}" == "true" ]]; then
          set -- "$@" --wait
        fi
        if [[ "${DEBUG}" == "true" ]]; then
          set -- "$@" --debug
        fi
        if [[ "${TIMEOUT}"" != 300]]; then
          set -- "$@" --timeout ${TIMEOUT}
        helm upgrade << parameters.release-name >> << parameters.chart >> "$@" --install
